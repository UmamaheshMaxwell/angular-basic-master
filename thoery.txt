What is Angular ?

Angular is a developement platform for building a Single page applications for mobile and desktop

1. It uses typescript & HTML to build applications
2. Angular is written using typescript
3. It comes with features like components, directives, Forms, Pipes, Services. DI (Dependency Injection)

Angular versions
----------------
Early version on angular was named as Angular2, later it was renamed to Angular

Angular team releases new versions of the Angular regularly ( approximately for every 6 months)

Latest stable version is 11.1.1

Angular is developed and maintained by Google. It has large comunity using whihc we can find 
help over the internet easily

Features of Angular
--------------------
1. Two-way Binding  - Data binding is fast and automatic 
                    - Changes made to the view is automatically
                      updated in the component class and vice versa

2. Powerful Routing Support

3. Expressive HTML - We can use programming contsructs like, if conditions
                     for loops etc.. to render and control HTML pages

4. Modular by Design - Angular follows modular design. We can create modules
                       to better organize and manage our codebase.


Angular CLI
-----------
Angular CLI is a command-line interface tool that use to initialize, develop,
scaffold and maintain Angular applications directly from a command shell

1. npm install -g @angular/cli ( -g flag stands for global)
2. ng new angular-app (create a new folder)
3. cd angular-app
4. ng serve or npm start

component Selector
------------------
1. Selector can be directly used by typing element name or by attribute selector or by class selector

 selector : 'app-root'            <app-root></app-root>

 selector : '[app-root]'          <div app-root></div>

 selector : '[app="app-root"]'    <div app="app-root"></div>

 selector : '.app-root'           <div class="app-root></div>
 

 commands to create componenets, directives etc
 -------------------------------------------------
 create component -  ng generate component componentName  /
                     ng g c componentName

create directive  -  ng generate directive directiveName /
                     ng g d directiveName


 Template and templateURLs
 -------------------
 Temaplte - internal HTML
 
   template: `
              <div class="container">
                <h1>This is using inline template</h1>
                <h1> {{fullName}} </h1>
              </div>
            `,

 Template URL - External HTML file - './app.component.html'

 Style & StyleURLs
 ------------------
 Styles  : internal class

   styles: [`
                h1 {
                  font-weight: bold;
                  color: #00FF00
                }
            `]

 Style URL - External CSS File - ['./app.component.css']

 Data Binding
 ------------
 Data binding keeps both component and view in sync with each other

One-way Binding
-------------------

 Interpolation ({{ }}) - double curly braces 
  content inside the double curly braces is called "template expression"

  writing static text inside double curly braces

  {{'hello world'}} - Single quote
  {{"hello world"}}  - Double quotes

 Property Binding 
-------------------
   text = 'Welcome to Angular'
   isDisabled = false;
   url ="https://cli.angular.io/"

  <h1 [innerText]="text"></h1>
  <button [disabled]="isDisabled">I am disabled</button><br><br>
  <a [href]="url" [target]="target" >Angular CLI</a>

 Two-way binding
 ----------------
  firstName = 'Scott'
 <input type="text" [(ngModel)]="firstName" class="form-control"> <br>

 Event Binding 
 --------------
 fullName ='Tuan Bui'
 
<button (click)="getName()" class="btn btn-primary">Get FullName</button><br>

   getName(){
    console.log(this.fullName)
     this.fullName = 'Adam Colson'
     console.log(this.fullName)
   }

  
  Angular directives
  -------------------
  Angular Directives helps us to manipulate the developement

  we can chnage the appearance. behaviour or layout of a DOM element using Directives.

  They help us to extend the HTML

  Structural Directives                         Attribute directives
  ----------------------                       -----------------------
  *ngFor                                          ngModel
  *ngSwitch                                       ngClass
  *ngif                                           ngStyle

  *ngFor
  ----------
  Angular ngFor directive iterates over a collection of data. 
  like an array, list etc and create HTML element for each of 
  the items from a HTml tempalate

  It helps us to build lists ot tables to display tabular data
  in a nice way

  the syntax strats with *ngFor , The * represents Angular Template Syntax

  *ngSwitch
  ----------
  It is an angular structual directive which allows us to add or remove DOM elements

  it works in conjunction with ngSwitchCae & ngSwitchDefault

  <container-elemnt [ngSwitch]="switch_expression">
    <inner_elemnet *ngSwitchCase="expression"></inner_element>
    <inner_elemnet *ngSwitchCase="expression"></inner_element>
    <inner_elemnet *ngSwitchCase="expression"></inner_element>
    <inner_elemnet *ngSwitchCaseDefault></inner_element>
  <container-elemnt>

 [ngSwitch]
----------
  It is bound to container element like div
  we assign switch expression via property binding

  ngSwitchCase
  ------------
  This is bound to inner element which we must place inside container element
  We use *(Asterik Symbol) because it is structural directive

  ngSwitchDefault
  ----------------
  It is bount to inner element, which we must place inside the container
  
*ngIf
-----
Allows us to add or remove DOM element based on some condition

We can add this to any element like div, p, h1 etc

It must be prefixed with *


ngClass
--------
Adds or removes CSS classes on an HTML elements

ngClass with a string
---------------------
We can use the string as expression and bind it directly to ngClass attribbute

we can add multiple classes with space between each class

ngClass with array
------------------
We can achieve the same result by using an array instead of a string 

ngClass with Object
-------------------
We can achieve the same result by using an object instead of a array 

ngStyle
--------
Allows us to set the inline style of a HTML element using expression

Custom Directives-
--------------------

Element Ref :  is a service that grants direct acess to the DOM element 
               thorugh its native Element property

Custom Directives
-------------------
The Angular pipes are used to transform the data

We can pass arguments to pipe and chain pipes

These arguments can be added to the pipe using a colon (:) 
and followed by the value of the argument

The angular allows us to create custom pipes

Angular pipes takes data as input and formats or transform the data
to diplay in the template

in-built pipes: Currency pipe, date pipe, number pipe,  
               percent pipe, decimal pipe, slice pipe etc.

Component Communication
-----------------------
Components are useless if they do not share data between them

The parent component communicates with child component using @Input Annotation

The child component can communicate with the parent by raising an event which parent can listen

Parent to Child
------------------

1. Create parent and child components
2. In the child component, import @Input module from @angular/core library
3. Mark those properties which we need data from parent, as Input property using @Input decorator
4. Bind the child component property in the parent compoent when initializing the child
5. @Input decorator is used to configure the input properties of the component


Child to Parent
----------------
There are three ways in which parent component can interact with child component

1. Parent listens to child event
2. Parent uses local variable to access the child
3. Parent uses @viewChild to get reference to the child component

Parent listens to child event
-------------------------------
1. The child component exposes an eventEmitter property
2. This property is decorated with @Output decorator 
3. when the child component needs to communicate with parent it raises the event
4. The parent component listens to that event and reacts to it

EventEmitter
------------
To raise an event the component must declare an EventEmitter property 
The event can be emitted by calling emit() method

Output decorator
----------------
To make the event accesssible from parent component we must 
decorate the property with @Output decorator 

Parent uses local variable to access the child
------------------------------------------------
1. Parent teamplate can access child compoent properties and methods 
   by creating a template reference variable

Parent uses @viewChild to get reference to the child component
---------------------------------------------------------------
1. Injecting an instance of the child component into the parent as @viewchild 
2. @ViewChild decorator takes the name of the component/directive as its input
3. The Angular then injects the reference of the component to the property


Angular LifeCycle Hooks
-----------------------
The life cycle hooks are the methods that angular invokes on the directives
and components as it creates, changes and destroys them.

We can fin-tune the behaviour of our components during its creation
updation and destructions.

List of Life cycle hooks
-------------------------
ngOnChanges
ngOnInIt
ngDoCheck
ngAfterContentInIt
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngOnDestroy

Constructor()
---------------
Life cycle of a component begin when Angular creates the component class
First method that gets invoked is class constructor 

Constructor is neither life Cycle hook nor it is specific to Angular. 
It is Javascript feature.
It is method which is invoked when class is created.

ngOnChanges()
-------------
1. Angular invokes ngOnChanges life cycle hook when ever any data-bound 
   input property of the component or directive changes.

2. Initalizing the input properties is the first task that Angular does 
   during the change detenction life cycle 

3. If it detects any change in property then raises the ngOnchanges hook

ngOnInit()
-----------
1. Angular raises the ngOninit hook, after it creates the component and updates
   its properties

2. It raises it after thengOnChanges hook

3. This hook is fired only once and immediately after its creation 

4. This is a perfect place where if we want to add any intialization
   logic for our component

5. Here we have access to every property of the compoent 

6. None of the child components are available at this point.

7. Hence properties we decorate with @ViewChild, @ViewChildren, 
@ContentChild, @ContentChidren will not be available to use.

ngDoCheck()
-----------
1. The angular invokes the ngDoCheck() hook during every change detection cycle
2. This hook is invoked even if there is no change in any of the properties
3. Angular invokes it after ngOnChanges && ngOninit hooks
4. We use this hook to implement a custom change detection, wheneever Angular 
   fails to detect the changes made to Input properties

why OnChanges doesn't fire ?
----------------------------
1. the change detector raises onChanges hook , but it uses a different techniques 
   for comparison 

2. The change detector uses the === strict equality operator for detecting changes 
   to the input properties

3. For Primitive types like string and number, the above comparison works

4. But in case of Object this fails. For Array/Objects, the strict checking 
   means only refrences are checked. Since the reference remain same the 
   Angular doesn not raise on change hook.

     a = 10
     a = 20;

possible solutions
---------------------
1. create a new Object and copy old data to new Object 
   
    obj = {a:1}
    obj = new obj()
    obj.a =2;

2. we can perform our own change detection using ngDoCheck life cycle hook

ngOnDestroy
------------
1. It is called just before the component / Directive instance is destroyed by angular
2. We use this hook to perform any cleanup logic for the component
3. This is the correct place where you would like to unsubscribe observables 
   and detach event handlers to avoid meomory leaks

Angular Forms
--------------
The Angular forms are used to collect the data from Users

Somethings forms are expected to do 

1. Initialize the form fields
2. capture the data from users
3. Track the changes
4. validate the inputs
5. display helpful errors to the users

Types of Forms
---------------
Template Driven Forms
Reactive Forms 

Template Driven Forms
---------------------
1. There are simple forms which can be used to devlop webforms. 
2. These are called template driven as everything that we are going to use in the application 
   is defined in the template.

